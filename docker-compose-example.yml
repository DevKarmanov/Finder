version: '3.8'
services:

  rabbit:
    image: rabbitmq:alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5672:5672"
    networks:
      - app-network

  elastic:
    image: elasticsearch:7.17.22
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
    restart: always
    ports:
      - "9200:9200"
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: always
    volumes:
      - your/path/to/folder
    ports:
      - "5432:5432"
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    networks:
      - app-network
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # API порт для работы с объектным хранилищем
      - "9001:9001"  # Порт для веб-консоли
    volumes:
      - - your/path/to/folder:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    restart: always
    networks:
      - app-network
    command: server /data --console-address ":9001" # Указывает Docker, какой именно командой запускать контейнер после его создания

  message-microservice:
    image: message_broker_microservice
    build:
      context: .
      dockerfile: Message_broker_microservice/Dockerfile
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - SMTP_MAIL=${SMTP_MAIL}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - RABBIT_HOST=rabbit
    depends_on:
      - rabbit
      - ads
    restart: always
    ports:
      - "8085:8085"
    networks:
      - app-network

  comment:
    image: comment_microservice
    build:
      context: .
      dockerfile: Comment_microservice/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      AUTHENTICATION_HOST: auth-microservice
      X_API_KEY: ${X_API_KEY}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - postgres
      - redis
      - auth-microservice
    restart: always
    ports:
      - "8081:8081"
    networks:
      - app-network

  image-microservice:
    image: image_microservice
    build:
      context: .
      dockerfile: Image_microservice/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MINIO_USERNAME: ${MINIO_ROOT_USER}
      MINIO_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ENDPOINT: minio
      AUTHENTICATION_HOST: auth-microservice
      X_API_KEY: ${X_API_KEY}
    depends_on:
      - postgres
      - minio
      - auth-microservice
    restart: always
    ports:
      - "8082:8082"
    networks:
      - app-network

  ads:
    image: ads_microservice
    build:
      context: .
      dockerfile: Ads_microservice/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      REDIS_HOST: redis
      COMMENT_HOST: comment
      ELASTIC_HOST: elasticRepo
      IMAGE_HOST: image-microservice
      AUTHENTICATION_HOST: auth-microservice
      X_API_KEY: ${X_API_KEY}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      SEND_EMAIL_MESSAGE: ${SEND_EMAIL_MESSAGE}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBIT_HOST: rabbit
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - auth-microservice
      - postgres
      - redis
      - rabbit
      - elastic
    restart: always
    ports:
      - "8080:8080"
    networks:
      - app-network

  auth-microservice:
    image: authentication_microservice
    build:
      context: .
      dockerfile: Authentication_microservice/Dockerfile
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      ADS_HOST: ads
      REDIS_HOST: redis
      IMAGE_HOST: image-microservice
      AUTH_HOST: auth-microservice
      X_API_KEY: ${X_API_KEY}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBIT_HOST: rabbit
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    depends_on:
      - postgres
      - redis
    restart: always
    ports:
      - "8083:8083"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
